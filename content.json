{"pages":[],"posts":[{"title":"Java基础知识（1）","text":"一些基本高频的Java基础-参考JavaGuide开源项目 -1.面向对象和面向过程的区别· 面向过程 ： 面向过程性能比面向对象更高。 因为类调用时需要需要实例化，比较消耗资源，所以当性能是重要的考量要素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程的开发。 ·面向对象：面向对象易维护、易复用、易扩展。因为面向对象有封装、继承、堕胎的特性，所以可以设计出低耦合的系统，是整个系统更加的灵活、也更易于维护。 note:面向过程也需要分配内存，计算内存偏移量，Java性能差的原因并不是因为它是面向对象的语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。 Java程序从源文件创建到程序运行要经过两大步骤： 1、源文件由编译器编译成字节码（ByteCode）； 2、字节码由java虚拟机解释运行。因为java程序既要编译同时也要经过JVM的解释运行，所以说Java被称为半解释语言。 而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。 -2.Java 语言有哪些特点? 简单易学； 面向对象（封装，继承，多态）； 平台无关性（ Java 虚拟机实现平台无关性）； 可靠性； 安全性； 支持多线程 支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）； 编译与解释并存； -3.关于 JVM JDK 和 JRE 最详细通俗的解答JVM Java虚拟机（JVM）是运行Java字节码的虚拟机。JVM有针对不同系统的特定实现（Windows, Linux, macOS）, 目的是使用相同的字节码，他们都会给出相同的结果。 什么是字节码？采用字节码的好处 在Java中，JVM可以理解的代码就叫字节码（即扩展名为.class的文件），它不免向任何特定的处理器，只面向虚拟机。Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以Java程序运行时比较高效，而且由于字节码并不针对一种特定的机器，因此，Java程序不需要重新编译就可以在多种不同的操作系统的计算机上运行。 Java程序从源代码到运行一般由下面3步：","link":"/2020/02/29/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89/"},{"title":"Study Plan","text":"Some study plans -First - Basic knowledge Program language (JAVA) Basic algorithm Basic web knowledge Basic design patterns Basic database knowledge -Plan First have a basic knowledge of algorithm and web knowledge 2019.12.10 - 2019.12.18 Half of the online lessons should be studied, 2 hours a day for each pattern. Also should take a stroll in LeetCode dealing with the easy and medium problems. For the web, the important patterns are listed as following: TCP/IP 协议栈有一大部分隐藏于操作系统内核态 *TCP/IP协议体系认知 * 分层。一部分处于用户态，一部分处于内核态。数据链路层，网络层，传输层封装于操作系统内核态。应用层存在于操作系统的用户空间，包括DNS，FTP，HTTPs，HTTP，工作中接触较多的是应用层的部分。但其它层的原理必须理解，面试考察。 层与层之间下层对上层是透明的，传输在每一层是对等的。 数据链路层 以太网帧的格式 MTU（最大传输单元）的概念 ARP协议和RARP协议（地址协议和逆地址协议，网卡MAC地址和IP地址互查机制）（网络层和链路层的中间层）ARP报文格式，查询原理，缓存机制 网络层 掌握IP首部格式：example 十六位分片标识，DF不分片标志，MF更多封片标志，13位片偏移，八位生存时间TTL，16位的首部检验 et. 掌握如何IP分片：如总长大于MTU值，画分片情况；如何避免IP分片（在应用层和传输层做限制）；确定分片顺序；确定分片谁否全部到达。 掌握IP选路，能看懂路由表，Router print,路由表每个字段的含义 掌握ICMP（因特网控制报文协议）：理解为网络层和传输层的中间协议（报文格式）；2种查询报文+5种差错报文。 传输层 掌握UDP协议：无连接，不可靠的特点；首部各字段 掌握TCP协议（面试集中考察）：面向连接，可靠；首部各字段（序号，确认号，首部长度，窗口大小，校验和等特别的，完成可靠功能的部分）；TCP链接控制机制（三次握手，四次挥手，同时打开，同时关闭，半关闭）；TCP流量控制机制（滑动窗口，慢启动，拥塞避免，快传重传，快速回复和算法原理）TCP超时重传机制（四个定时器）；一些问题（为什么三次握手四次挥手？为什么TCP和UDP都存在尾包头？） 应用层 掌握DNS（域名解析）协议：名字空间；DNS指针查询（反向查找或逆向解析）基本原理，DNS缓存。 FTP协议（活化石）：控制链接和数据连接（为什么需要这两种连接）；两种工作模式（PASV+PORT）；各种FTP指令和响应码；FTP断点续传，匿名FTP HTTP协议：报文格式（请求报文，响应报文，请求头各种字段，响应头各种字段）；HTTP状态码。 HTTPS协议：详细握手过程，各种算法（摘要算法，数字签名，数字证书的原理和过程）","link":"/2019/12/10/Study-Plan/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/11/29/hello-world/"},{"title":"Picture","text":"","link":"/2019/12/05/Picture/"}],"tags":[{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Study","slug":"Study","link":"/tags/Study/"},{"name":"Picture","slug":"Picture","link":"/tags/Picture/"}],"categories":[{"name":"Picture","slug":"Picture","link":"/categories/Picture/"}]}